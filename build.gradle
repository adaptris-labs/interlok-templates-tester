plugins {
  id 'java'
  id 'maven'
  id 'maven-publish'
  id 'jacoco'
  id 'com.github.spotbugs' version '3.0.0'
  id 'de.undercouch.download' version '4.0.4'
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '3.12-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.12-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")
  interlokTemplateZipUrl = 'https://github.com/adaptris/interlok-templates/archive/master.zip'

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokCommonJavadocs') ? project.getProperty('interlokCommonJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok Template Tester'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '1.7.30'
  junitJupiterVersion = '5.5.1'
  mockitoVersion = '3.3.3'
  sonicVersion = '8.5.0'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}
ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

sourceCompatibility = 1.8
group   = 'com.adaptris'
version = releaseVersion
def versionDir = "$buildDir/version"

// In this section you declare where to find the dependencies of your project
repositories {
  mavenCentral()
  maven { url "$defaultNexusRepo" }
  maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url "$nexusBaseUrl/content/groups/private"
    }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
}

configurations {
  javadoc {}
  offlineJavadocPackages {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  compile  ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
  compile  ("com.adaptris:interlok-common:$interlokCoreVersion") { changing= true}
  
  compile ("org.slf4j:slf4j-api:$slf4jVersion")
  
  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}
  
  testCompile ("com.adaptris:interlok-oauth-azure:$interlokCoreVersion") {changing= true}
  testCompile ("com.adaptris:interlok-oauth-gcloud:$interlokCoreVersion") {changing= true}
  testCompile ("com.adaptris:interlok-oauth-generic:$interlokCoreVersion") {changing= true}
  testCompile ("com.adaptris:interlok-oauth-salesforce:$interlokCoreVersion") {changing= true}
  
  testCompile ("com.adaptris:interlok-mqtt:$interlokCoreVersion") {changing= true}
  testCompile ("com.adaptris:interlok-xml-security:$interlokCoreVersion") {changing= true}
  
  testCompile ("com.adaptris:interlok-jms-sonicmq:$interlokCoreVersion") {changing= true}
  testCompile ("com.aurea:sonic-channel:$sonicVersion")
  testCompile ("com.aurea:sonic-client:$sonicVersion")
  testCompile ("com.aurea:sonic-crypto:$sonicVersion")
  testCompile ("com.aurea:sonic-xa:$sonicVersion")
  testCompile ("com.aurea:sonic-xmessage:$sonicVersion")
  
  testCompile ("com.adaptris:interlok-edi-stream:$interlokCoreVersion") {changing= true}

  testCompile  ("org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion")
  testCompile  ("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
  testCompile  ("org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion")
  testCompile  ("org.junit.platform:junit-platform-launcher:1.6.2")
  
  testCompile  ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true}
   
  testCompile ("org.mockito:mockito-core:$mockitoVersion")
  testCompile ("org.mockito:mockito-inline:$mockitoVersion")

  javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}

  offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
  offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}

}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}
// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.version', value: project.version)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'build.info', value: buildInfo())
    }
  }
}

task offlinePackageList(type: Copy) {
  description 'Build an offline package-list for javadocs'
  group 'Documentation'

  project.configurations.offlineJavadocPackages.collect { dependency ->
    from(zipTree(dependency)) {
      into dependency.name
    }
  }
  include "package-list"
  into offlineJavadocPackageDir
}

javadoc {
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    title= componentName
  }
}

test {
  useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", "Test interlok templates.")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.9.0+")
        properties.appendNode("license", "false")
        properties.appendNode("tags", "template")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

spotbugsMain {
  // showProgress = "true"
  effort = "max"
  // Ignore failures?
  // ignoreFailures = false

  // We only care about "high priority" issues...
  reportLevel = "high"
  reports {
    xml {
      enabled = false
    }
    html {
      enabled = true
    }
  }
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false

task deleteGeneratedFiles(type: Delete) {
  delete 'activemq-data'
  delete 'data'
}


javadoc.dependsOn offlinePackageList
check.dependsOn jacocoTestReport
clean.dependsOn deleteGeneratedFiles

/**
 * The following two tasks download a ZIP file and extract its
 * contents to the build directory
 */
task downloadZipFile(type: Download) {
    src interlokTemplateZipUrl
    dest new File(buildDir, 'interlok-templates.zip')
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into new File(buildDir, '/resources/test/interlok-templates')
}

test.dependsOn downloadAndUnzipFile
